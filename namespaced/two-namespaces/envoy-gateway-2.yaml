apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: envoyproxies.config.gateway.envoyproxy.io
spec:
  group: config.gateway.envoyproxy.io
  names:
    kind: EnvoyProxy
    listKind: EnvoyProxyList
    plural: envoyproxies
    singular: envoyproxy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EnvoyProxy is the Schema for the envoyproxies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: EnvoyProxySpec defines the desired state of EnvoyProxy.
            type: object
          status:
            description: EnvoyProxyStatus defines the observed state of EnvoyProxy
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certgen
  namespace: envoy-gateway-system-2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway
  namespace: envoy-gateway-system-2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: certgen
  namespace: envoy-gateway-system-2
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: infra-manager
  namespace: envoy-gateway-system-2
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - get
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: envoy-gateway-system-2
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   creationTimestamp: null
#   name: envoy-gateway-role
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - namespaces
#   - secrets
#   - services
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - apps
#   resources:
#   - deployments
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - gateway.networking.k8s.io
#   resources:
#   - gatewayclasses
#   - gateways
#   - httproutes
#   - referencegrants
#   - referencepolicies
#   verbs:
#   - get
#   - list
#   - update
#   - watch
# - apiGroups:
#   - gateway.networking.k8s.io
#   resources:
#   - gatewayclasses/status
#   - gateways/status
#   - httproutes/status
#   verbs:
#   - update
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: metrics-reader
# rules:
# - nonResourceURLs:
#   - /metrics
#   verbs:
#   - get
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: proxy-role
# rules:
# - apiGroups:
#   - authentication.k8s.io
#   resources:
#   - tokenreviews
#   verbs:
#   - create
# - apiGroups:
#   - authorization.k8s.io
#   resources:
#   - subjectaccessreviews
#   verbs:
#   - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: certgen
  namespace: envoy-gateway-system-2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: certgen
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: envoy-gateway-system-2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: infra-manager
  namespace: envoy-gateway-system-2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: infra-manager
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system-2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: envoy-gateway-system-2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: envoy-gateway
  namespace: envoy-gateway-system-2
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: envoy-gateway-rolebinding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: envoy-gateway-role
# subjects:
# - kind: ServiceAccount
#   name: envoy-gateway
#   namespace: envoy-gateway-system-1
# - kind: ServiceAccount
#   name: envoy-gateway
#   namespace: envoy-gateway-system-2
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: proxy-rolebinding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: proxy-role
# subjects:
# - kind: ServiceAccount
#   name: envoy-gateway
#   namespace: envoy-gateway-system-1
# - kind: ServiceAccount
#   name: envoy-gateway
#   namespace: envoy-gateway-system-2
---
apiVersion: v1
data:
  xds-certificate.json: '{"resources":[{"@type":"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret","name":"xds_certificate","tls_certificate":{"certificate_chain":{"filename":"/certs/tls.crt"},"private_key":{"filename":"/certs/tls.key"}}}]}'
  xds-trusted-ca.json: '{"resources":[{"@type":"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret","name":"xds_trusted_ca","validation_context":{"trusted_ca":{"filename":"/certs/ca.crt"},"match_typed_subject_alt_names":[{"san_type":"DNS","matcher":{"exact":"envoy-gateway"}}]}}]}'
kind: ConfigMap
metadata:
  labels:
    app.gateway.envoyproxy.io/name: envoy
    gateway.envoyproxy.io/owning-gateway-name: eg
    gateway.envoyproxy.io/owning-gateway-namespace: envoy-gateway-system-2
  name: envoy-envoy-gateway-system-2-eg
  namespace: envoy-gateway-system-2
---
apiVersion: v1
data:
  envoy-gateway.yaml: |
    apiVersion: config.gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    provider:
      type: Kubernetes
    gateway:
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: envoy-gateway-system-2
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway
  namespace: envoy-gateway-system-2
spec:
  ports:
  - name: grpc
    port: 18000
    targetPort: 18000
  selector:
    control-plane: envoy-gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway-metrics-service
  namespace: envoy-gateway-system-2
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: envoy-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: envoy-gateway
  name: envoy-gateway
  namespace: envoy-gateway-system-2
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: envoy-gateway
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: envoy-gateway
      labels:
        control-plane: envoy-gateway
    spec:
      containers:
      - args:
        - server
        - --config-path=/config/envoy-gateway.yaml
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: nomadxd/gateway-dev:v1
        imagePullPolicy: IfNotPresent
        name: envoy-gateway
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 1000m
            memory: 1000Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /config
          name: envoy-gateway-config
          readOnly: true
        - mountPath: /home/nonroot
          name: log-volume
        - mountPath: /certs
          name: certs
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.11.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      - command: ["/bin/sh", "-ec", "sleep 1000"]
        image: busybox
        name: busybox-container
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        volumeMounts:
        - mountPath: /home
          name: log-volume
      securityContext:
        runAsNonRoot: false
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: envoy-gateway-config
        name: envoy-gateway-config
      - name: log-volume
        emptyDir: {}
      - name: certs
        secret:
          secretName: envoy-gateway
---
apiVersion: batch/v1
kind: Job
metadata:
  name: certgen
  namespace: envoy-gateway-system-2
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: certgen
    spec:
      containers:
      - command:
        - envoy-gateway
        - certgen
        image: nomadxd/gateway-dev:v1
        imagePullPolicy: IfNotPresent
        name: envoy-gateway-certgen
      restartPolicy: Never
      securityContext:
        runAsUser: 0
        #runAsGroup: 65534
        #runAsNonRoot: false
        #runAsUser: 65534
      serviceAccountName: certgen
  ttlSecondsAfterFinished: 0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    app.gateway.envoyproxy.io/name: envoy
    gateway.envoyproxy.io/owning-gateway-name: eg
    gateway.envoyproxy.io/owning-gateway-namespace: envoy-gateway-system-2
  name: envoy-envoy-gateway-system-2-eg
  namespace: envoy-gateway-system-2
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.gateway.envoyproxy.io/name: envoy
      gateway.envoyproxy.io/owning-gateway-name: eg
      gateway.envoyproxy.io/owning-gateway-namespace: envoy-gateway-system-2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.gateway.envoyproxy.io/name: envoy
        gateway.envoyproxy.io/owning-gateway-name: eg
        gateway.envoyproxy.io/owning-gateway-namespace: envoy-gateway-system-2
    spec:
      automountServiceAccountToken: false
      containers:
      - args:
        - --service-cluster envoy-gateway-system-2-eg
        - --service-node $(ENVOY_POD_NAME)
        - |
          --config-yaml admin:
            access_log_path: /dev/null
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 19000
          dynamic_resources:
            cds_config:
              resource_api_version: V3
              api_config_source:
                api_type: DELTA_GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: xds_cluster
                set_node_on_first_message_only: true
            lds_config:
              resource_api_version: V3
              api_config_source:
                api_type: DELTA_GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: xds_cluster
                set_node_on_first_message_only: true
          node:
            cluster: envoy-gateway-system
            id: envoy-default
          static_resources:
            clusters:
            - connect_timeout: 1s
              load_assignment:
                cluster_name: xds_cluster
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: envoy-gateway
                          port_value: 18000
              http2_protocol_options: {}
              name: xds_cluster
              type: STRICT_DNS
              transport_socket:
                name: envoy.transport_sockets.tls
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
                  common_tls_context:
                    tls_params:
                      tls_maximum_protocol_version: TLSv1_3
                    tls_certificate_sds_secret_configs:
                    - name: xds_certificate
                      sds_config:
                        path_config_source:
                          path: "/sds/xds-certificate.json"
                        resource_api_version: V3
                    validation_context_sds_secret_config:
                      name: xds_trusted_ca
                      sds_config:
                        path_config_source:
                          path: "/sds/xds-trusted-ca.json"
                        resource_api_version: V3
          layered_runtime:
            layers:
              - name: runtime-0
                rtds_layer:
                  rtds_config:
                    resource_api_version: V3
                    api_config_source:
                      transport_api_version: V3
                      api_type: DELTA_GRPC
                      grpc_services:
                        envoy_grpc:
                          cluster_name: xds_cluster
                  name: runtime-0
        - --log-level info
        command:
        - envoy
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: ENVOY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: envoyproxy/envoy:v1.23-latest
        imagePullPolicy: IfNotPresent
        name: envoy
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /certs
          name: certs
          readOnly: true
        - mountPath: /sds
          name: sds
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: envoy-gateway
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 300
      volumes:
      - name: certs
        secret:
          defaultMode: 420
          secretName: envoy
      - configMap:
          defaultMode: 420
          items:
          - key: xds-trusted-ca.json
            path: xds-trusted-ca.json
          - key: xds-certificate.json
            path: xds-certificate.json
          name: envoy-envoy-gateway-system-2-eg
          optional: false
        name: sds
